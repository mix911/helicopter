//
//  vector3d.h
//  helicopter
//
//  Created by demo on 06.11.11.
//  Copyright 2011 __MyCompanyName__. All rights reserved.
//

#ifndef helicopter_vector3d_h
#define helicopter_vector3d_h

//////////////////////////////////////////////////////////////////////////////////
// 3d vector structure
//////////////////////////////////////////////////////////////////////////////////
typedef struct _vector3d
{
    float x, y, z;
} vector3d;

//////////////////////////////////////////////////////////////////////////////////
// Create vector3d by spherical coordinates
//////////////////////////////////////////////////////////////////////////////////
vector3d* vec3_spherical(vector3d* out, float colatitude, float azimuth, float r);

//////////////////////////////////////////////////////////////////////////////////
// Get collatitude of vector
//////////////////////////////////////////////////////////////////////////////////
float get_collatitude(vector3d* v);

//////////////////////////////////////////////////////////////////////////////////
// Get azimuth      
//////////////////////////////////////////////////////////////////////////////////
float get_azimuth(vector3d* v);

//////////////////////////////////////////////////////////////////////////////////
// Normilize vector
//////////////////////////////////////////////////////////////////////////////////
vector3d* normilize(vector3d* out);

//////////////////////////////////////////////////////////////////////////////////
// Invert vector
//////////////////////////////////////////////////////////////////////////////////
vector3d* invert(vector3d* out);

//////////////////////////////////////////////////////////////////////////////////
// Return length of vector
//////////////////////////////////////////////////////////////////////////////////
float lenght(vector3d* v);

//////////////////////////////////////////////////////////////////////////////////
// Return square of lentgh
//////////////////////////////////////////////////////////////////////////////////
float lenght_sq(vector3d* v);

//////////////////////////////////////////////////////////////////////////////////
// Multiple vector on 'k'
//////////////////////////////////////////////////////////////////////////////////
vector3d* multiple(vector3d* out, float k);

//////////////////////////////////////////////////////////////////////////////////
// Addition two vectors, out and rgh, and store result in out
//////////////////////////////////////////////////////////////////////////////////
vector3d* add_vec3d(vector3d* out, vector3d* rgh);

//////////////////////////////////////////////////////////////////////////////////
// Get sum of two vectors
//////////////////////////////////////////////////////////////////////////////////
vector3d* sum_vec3d(vector3d* out, vector3d* lft, vector3d* rgh);

//////////////////////////////////////////////////////////////////////////////////
// Get subtraction of two vectors
//////////////////////////////////////////////////////////////////////////////////
vector3d* subtraction(vector3d* out, vector3d* lft, vector3d* rgh);

//////////////////////////////////////////////////////////////////////////////////
// Get cross product of two vectors
//////////////////////////////////////////////////////////////////////////////////
vector3d* cross(vector3d* out, vector3d* lft, vector3d* rgh);

//////////////////////////////////////////////////////////////////////////////////
// Get dot product of two vectors
//////////////////////////////////////////////////////////////////////////////////
float dot(vector3d* lft, vector3d* rgh);

#endif
